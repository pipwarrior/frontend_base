{"ast":null,"code":"var _jsxFileName = \"/Users/yapfengwei/Desktop/MyApplications/sample3_frontend/src/Routes/Route.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect } from 'react-router-dom';\n\nconst RouteWrapper = ({\n  component: Component,\n  isLoginPage,\n  isPrivate,\n  isAdminOnly,\n  userData,\n  ...rest\n}) => {\n  // const signed = userData.token;\n  const signed = localStorage.getItem('auth-token');\n  const accountType = localStorage.getItem('accountType');\n  if (isLoginPage && signed && accountType) return /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/catalog\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 52\n    }\n  }); // Route is private and the user is not logged in\n\n  if (isPrivate && !signed) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (isAdminOnly && accountType !== \"Admin\") {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    component: Component,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default RouteWrapper;\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired\n};\nRouteWrapper.defaultProps = {\n  isPrivate: false\n};","map":{"version":3,"sources":["/Users/yapfengwei/Desktop/MyApplications/sample3_frontend/src/Routes/Route.js"],"names":["React","PropTypes","Route","Redirect","RouteWrapper","component","Component","isLoginPage","isPrivate","isAdminOnly","userData","rest","signed","localStorage","getItem","accountType","propTypes","bool","oneOfType","element","func","isRequired","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;;AAEA,MAAMC,YAAY,GAAG,CAAC;AACpBC,EAAAA,SAAS,EAAEC,SADS;AAEpBC,EAAAA,WAFoB;AAGpBC,EAAAA,SAHoB;AAIpBC,EAAAA,WAJoB;AAKpBC,EAAAA,QALoB;AAMpB,KAAGC;AANiB,CAAD,KAOf;AACJ;AACA,QAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAf;AACA,QAAMC,WAAW,GAAGF,YAAY,CAACC,OAAb,CAAqB,aAArB,CAApB;AAEA,MAAIP,WAAW,IAAIK,MAAf,IAAyBG,WAA7B,EAA0C,oBAAO,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP,CALtC,CAOJ;;AACA,MAAIP,SAAS,IAAI,CAACI,MAAlB,EAA0B;AACxB,wBAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,MAAGH,WAAW,IAAIM,WAAW,KAAK,OAAlC,EAA0C;AACxC,wBAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAED,sBACE,oBAAC,KAAD,oBAAWJ,IAAX;AAAiB,IAAA,SAAS,EAAEL,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAGD,CA1BD;;AA4BA,eAAeF,YAAf;AAEAA,YAAY,CAACY,SAAb,GAAyB;AACvBR,EAAAA,SAAS,EAAEP,SAAS,CAACgB,IADE;AAEvBZ,EAAAA,SAAS,EAAEJ,SAAS,CAACiB,SAAV,CAAoB,CAACjB,SAAS,CAACkB,OAAX,EAAoBlB,SAAS,CAACmB,IAA9B,CAApB,EAAyDC;AAF7C,CAAzB;AAKAjB,YAAY,CAACkB,YAAb,GAA4B;AAC1Bd,EAAAA,SAAS,EAAE;AADe,CAA5B","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect } from 'react-router-dom';\n\nconst RouteWrapper = ({\n  component: Component,\n  isLoginPage,\n  isPrivate,\n  isAdminOnly,\n  userData,\n  ...rest\n}) => {\n  // const signed = userData.token;\n  const signed = localStorage.getItem('auth-token');\n  const accountType = localStorage.getItem('accountType');\n\n  if (isLoginPage && signed && accountType) return <Redirect to=\"/catalog\" />\n\n  // Route is private and the user is not logged in\n  if (isPrivate && !signed) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  if(isAdminOnly && accountType !== \"Admin\"){\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <Route {...rest} component={Component} />\n  )\n}\n\nexport default RouteWrapper;\n\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired\n}\n\nRouteWrapper.defaultProps = {\n  isPrivate: false\n}\n"]},"metadata":{},"sourceType":"module"}